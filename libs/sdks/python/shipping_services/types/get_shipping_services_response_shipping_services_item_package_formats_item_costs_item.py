# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .get_shipping_services_response_shipping_services_item_package_formats_item_costs_item_drop_off_locations import (
    GetShippingServicesResponseShippingServicesItemPackageFormatsItemCostsItemDropOffLocations,
)


class GetShippingServicesResponseShippingServicesItemPackageFormatsItemCostsItem(UniversalBaseModel):
    compensation_amount: typing_extensions.Annotated[float, FieldMetadata(alias="compensationAmount")]
    cost: float
    vat_cost: typing_extensions.Annotated[float, FieldMetadata(alias="vatCost")]
    drop_off_locations: typing_extensions.Annotated[
        GetShippingServicesResponseShippingServicesItemPackageFormatsItemCostsItemDropOffLocations,
        FieldMetadata(alias="dropOffLocations"),
    ]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
