# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .get_shipping_services_response_shipping_services_item_package_formats_item_costs_item import (
    GetShippingServicesResponseShippingServicesItemPackageFormatsItemCostsItem,
)
from .get_shipping_services_response_shipping_services_item_package_formats_item_drop_off_options import (
    GetShippingServicesResponseShippingServicesItemPackageFormatsItemDropOffOptions,
)
from .get_shipping_services_response_shipping_services_item_package_formats_item_max_dimensions import (
    GetShippingServicesResponseShippingServicesItemPackageFormatsItemMaxDimensions,
)


class GetShippingServicesResponseShippingServicesItemPackageFormatsItem(UniversalBaseModel):
    package_format_identifier: typing_extensions.Annotated[str, FieldMetadata(alias="packageFormatIdentifier")]
    package_format_display_name: typing_extensions.Annotated[str, FieldMetadata(alias="packageFormatDisplayName")]
    max_dimensions: typing_extensions.Annotated[
        GetShippingServicesResponseShippingServicesItemPackageFormatsItemMaxDimensions,
        FieldMetadata(alias="maxDimensions"),
    ]
    costs: typing.List[GetShippingServicesResponseShippingServicesItemPackageFormatsItemCostsItem]
    drop_off_options: typing_extensions.Annotated[
        GetShippingServicesResponseShippingServicesItemPackageFormatsItemDropOffOptions,
        FieldMetadata(alias="dropOffOptions"),
    ]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
