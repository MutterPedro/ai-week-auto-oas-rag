# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .get_shipping_services_response_shipping_services_item_drop_off_locations import (
    GetShippingServicesResponseShippingServicesItemDropOffLocations,
)
from .get_shipping_services_response_shipping_services_item_package_formats_item import (
    GetShippingServicesResponseShippingServicesItemPackageFormatsItem,
)


class GetShippingServicesResponseShippingServicesItem(UniversalBaseModel):
    brand_type: typing_extensions.Annotated[str, FieldMetadata(alias="brandType")]
    shipping_service_identifier: typing_extensions.Annotated[str, FieldMetadata(alias="shippingServiceIdentifier")]
    shipping_service_display_name: typing_extensions.Annotated[str, FieldMetadata(alias="shippingServiceDisplayName")]
    country_iso_3_code: typing_extensions.Annotated[str, FieldMetadata(alias="countryIso3Code")]
    min_weight_in_grams: typing_extensions.Annotated[int, FieldMetadata(alias="minWeightInGrams")]
    max_weight_in_grams: typing_extensions.Annotated[int, FieldMetadata(alias="maxWeightInGrams")]
    is_eligible_for_collection: typing_extensions.Annotated[bool, FieldMetadata(alias="isEligibleForCollection")]
    is_eligible_for_collection_safe_place: typing_extensions.Annotated[
        bool, FieldMetadata(alias="isEligibleForCollectionSafePlace")
    ]
    is_eligible_for_delivery_safe_place: typing_extensions.Annotated[
        bool, FieldMetadata(alias="isEligibleForDeliverySafePlace")
    ]
    is_eligible_for_labelless_collections: typing_extensions.Annotated[
        bool, FieldMetadata(alias="isEligibleForLabellessCollections")
    ]
    is_eligible_for_labels_to_go: typing_extensions.Annotated[bool, FieldMetadata(alias="isEligibleForLabelsToGo")]
    package_formats: typing_extensions.Annotated[
        typing.List[GetShippingServicesResponseShippingServicesItemPackageFormatsItem],
        FieldMetadata(alias="packageFormats"),
    ]
    enhancements: typing.List[str]
    service_level: typing_extensions.Annotated[str, FieldMetadata(alias="serviceLevel")]
    drop_off_locations: typing_extensions.Annotated[
        GetShippingServicesResponseShippingServicesItemDropOffLocations, FieldMetadata(alias="dropOffLocations")
    ]
    standard_collection_price: typing_extensions.Annotated[float, FieldMetadata(alias="standardCollectionPrice")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
